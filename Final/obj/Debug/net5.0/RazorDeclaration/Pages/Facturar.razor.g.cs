// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Final.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\_Imports.razor"
using Final;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\_Imports.razor"
using Final.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\Pages\Facturar.razor"
using Final.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\Pages\Facturar.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Facturar")]
    public partial class Facturar : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 163 "C:\Users\JOEL\Downloads\Compressed\FinalProject3\final\Pages\Facturar.razor"
       
    DateTime now = DateTime.Now;

    int idcliente;
    string selected;
    string selectedserv;

    string clientess;
    int canti;
    int carr;
    int principal1 = 1;
    int carr1 = 0;
    int idfact;
    string descr;
    string servicedescr;
    int serviceprice;

    string  curId;
    int money;
    private Guid userId;
    string idclien;

    AppUser user = new AppUser();
    Factura facturas = new Factura();


    Producto_Facturado pfacturado = new Producto_Facturado();


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<Producto> product = new List<Producto>();

    List<Servicio> servvice = new List<Servicio>();


    List<ClienteFinal> client = new List<ClienteFinal>();
    List<Producto_Facturado> prodfact = new List<Producto_Facturado>();


    protected override async Task OnInitializedAsync()
    {
        product = await Task.Run(() => Service.GetProductos());
        client = await Task.Run(() => ServiceCl.GetClientes());

        prodfact = await Task.Run(() => ServiceProductoF.GetProductoFacturado());
        servvice = await Task.Run(() => ServiceServicio.GetServicio());

        var authState = await authenticationStateTask;
        user = await UserManager.GetUserAsync(authState.User);
        userId = user.Uid;
    }

    protected void carrito(){
        carr = 1;
        carr1 = 1;
        principal1 = 2;
        idclien = idcliente.ToString();

        Console.WriteLine("inicio");

        facturas.Nombre_Producto = "";
        facturas.Nombre_Servicio = "";
        facturas.Cantidad_Prod = 0;
        facturas.Monto_Total = 0;
        facturas.Itbis = 0;
        facturas.FechaYHora= now.ToString();
        facturas.Cliente_Id = idcliente;
        facturas.Uid = userId;
        Console.WriteLine("casi");

        ServiceF.Create(facturas);
        idfact = facturas.Id_Factura;

        Console.WriteLine("guardado");
        curId = idfact.ToString();


    }
    protected void dcarrito(){




    }

    protected void BorrarFactura(){
        carr = 0;
        carr1 = 0;
        principal1 = 1;

        ServiceF.DeleteFactura(facturas);
    }



    void getidclient(){
if ((clientess != "") && (clientess != null))
{
            carr = 2;
            principal1 = 2;

            foreach(var cl in client)
            {
                if (cl.Nombre==clientess)
                {

                    idcliente = cl.Cliente_Id;
                }


            }


        }
    }


    void AgregarPfacturado(){
if ((selected != "") && (selected != null) && (canti>0))
{
        foreach(var prop in product)
        {
            if(prop.Nombre == selected){
                descr = prop.Descripcion;
                money = prop.Precio;
            }
        }


        pfacturado.Nombre = selected;
        pfacturado.Cantidad = canti;
        pfacturado.Precio = money;
        pfacturado.Descripcion = descr;
        pfacturado.Id_Factura = idfact;
        ServiceProductoF.Create(pfacturado);
        NavigationManager.NavigateTo("AddFactura" + "/" + idclien + "/" + curId);
        
}

    }
    void agregarservice(){
        idclien = idcliente.ToString();

if ((selectedserv != "") && (selectedserv != null))
{
        foreach(var prop in servvice)
        {
            if(prop.Nombre_Servicio == selectedserv){
                servicedescr = prop.Descripcion;
                serviceprice = prop.Precio_servicio;
            }
        }


        pfacturado.Nombre = selectedserv;
        pfacturado.Precio = serviceprice;
        pfacturado.Descripcion = servicedescr;
        pfacturado.Id_Factura = idfact;
        ServiceProductoF.Create(pfacturado);
        NavigationManager.NavigateTo("AddFactura" + "/" + idclien + "/" + curId);
}

    }
    void Cancel()
    {
        NavigationManager.NavigateTo("FacturaInfo");


    }
    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<AppUser> UserManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SignInManager<AppUser> SignInManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PFacturadoService ServiceProductoF { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProductoServicio2 ServiceServicio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private FacturaService ServiceF { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ClienteService ServiceCl { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProductoService Service { get; set; }
    }
}
#pragma warning restore 1591
